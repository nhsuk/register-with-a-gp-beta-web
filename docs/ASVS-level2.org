#+TAGS: not_applicable(n) unclear(u) fail(f)
#+OPTIONS: num:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="//www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="//www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="//www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="//www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>


#+TITLE: ASVS Questions
* V1: Architecture, design and threat modelling	
** Verify that all application components are identified and are known to be needed.	1.1 :unclear:
** DONE Verify that all components, such as libraries, modules, and external systems, that are not part of the application but that the application relies on to operate are identified.	1.2
CLOSED: [2017-03-03 Fri 15:34]
These have been identified and described in the [[file:../package.json][package.json]] file.
** DONE Verify that a high-level architecture for the application has been defined.	1.3
CLOSED: [2017-03-03 Fri 15:38]
This can be found in [[https://trello.com/c/8sQsMPIy/171-initial-architecture][Trello]]

** TODO Verify that components are segregated from each other via a defined security control, such as network segmentation, firewall rules, or cloud based security groups.	1.8
This partly depends on how Rancher is setup and partly on the APIs we'll be
calling.
** DONE Verify the application has a clear separation between the data layer, controller layer and the display layer, such that security decisions can be enforced on trusted systems.	1.9
CLOSED: [2017-03-03 Fri 15:46]
We are using a MVC framework that keeps these layers separate called ~[[https://hapijs.com/][hapi.js]]~
** DONE Verify that there is no sensitive business logic, secret keys or other proprietary information in client side code.	1.10
CLOSED: [2017-03-03 Fri 15:48]

* V2: Authentication Verification Requirements               :not_applicable:
** Verify all pages and resources by default require authentication except those specifically intended to be public (Principle of complete mediation).	2.1 :not_applicable:
** Verify that all password fields do not echo the user’s password when it is entered.	2.2 :not_applicable:
** Verify all authentication controls are enforced on the server side.	2.4 :not_applicable:
** Verify all authentication controls fail securely to ensure attackers cannot log in.	2.6 :not_applicable:
** Verify password entry fields allow, or encourage, the use of passphrases, and do not prevent long passphrases/highly complex passwords being entered.	2.7 :not_applicable:
** Verify all account identity authentication functions (such as update profile, forgot password, disabled / lost token, help desk or IVR) that might regain access to the account are at least as resistant to attack as the primary authentication mechanism.	2.8 :not_applicable:
** Verify that the changing password functionality includes the old password, the new password, and a password confirmation.	2.9 :not_applicable:
** Verify that credentials are transported using a suitable encrypted link and that all pages/functions that require a user to enter credentials are done so using an encrypted link.	2.16 :not_applicable:
** Verify that the forgotten password function and other recovery paths do not reveal the current password and that the new password is not sent in clear text to the user.	2.17
** Verify that information enumeration is not possible via login, password reset, or forgot account functionality.	2.18 :not_applicable:
** Verify there are no default passwords in use for the application framework or any components used by the application (such as “admin/password”).	2.19 :not_applicable:
** Verify that request throttling is in place to prevent automated attacks against common authentication attacks such as brute force attacks or denial of service attacks.	2.20 :not_applicable:
** Verify that all authentication credentials for accessing services external to the application are encrypted and stored in a protected location.	2.21 :not_applicable:
** Verify that forgotten password and other recovery paths use a soft token, mobile push, or an offline recovery mechanism.	2.22 :not_applicable:
** Verify that account lockout is divided into soft and hard lock status, and these are not mutually exclusive. If an account is temporarily soft locked out due to a brute force attack, this should not reset the hard lock status.	2.23 :not_applicable:
** Verify that if knowledge based questions (also known as "secret questions") are required, the questions should be strong enough to protect the application.	2.24 :not_applicable:
** Verify that the system can be configured to disallow the use of a configurable number of previous passwords.	2.25 :not_applicable:
** Verify re-authentication, step up or adaptive authentication, two factor authentication, or transaction signing is required before any application-specific sensitive operations are permitted as per the risk profile of the application.	2.26 :not_applicable:
** Verify that measures are in place to block the use of commonly chosen passwords and weak passphrases.	2.27 :not_applicable:
** Verify that all authentication challenges, whether successful or failed, should respond in the same average response time.	2.28 :not_applicable:
** DONE Verify that secrets, API keys, and passwords are not included in the source code, or online source code repositories.	2.29
CLOSED: [2017-03-03 Fri 15:56]
** Verify that if an application allows users to authenticate, they use a proven secure authentication mechanism.	2.30 :not_applicable:
** Verify that if an application allows users to authenticate, they can authenticate using two-factor authentication or other strong authentication, or any similar scheme that provides protection against username + password disclosure.	2.31 :not_applicable:
** Verify that administrative interfaces are not accessible to untrusted parties.	2.32 :not_applicable:

* V3: Session Management Verification Requirements	
** Verify that there is no custom session manager, or that the custom session manager is resistant against all common session management attacks.	3.1 :unclear:
What does this mean?
** Verify that sessions are invalidated when the user logs out.	3.2
There is no _log out_ but we will clear the session on completion of transaction
or if they opt to abandon the transaction.
** TODO Verify that sessions timeout after a specified period of inactivity.	3.3
Sessions are currently invalidated after an hour of inactivity but we need to
change this to 20 minutes.
** TODO Verify that all pages that require authentication have easy and visible access to logout functionality.	3.5
In our case we'd want a cancel / abort transaction button
** DONE Verify that the session id is never disclosed in URLs, error messages, or logs. This includes verifying that the application does not support URL rewriting of session cookies.	3.6
CLOSED: [2017-03-03 Fri 16:36]
There is no session id, the session is stored in an encrypted cookie
** Verify that all successful authentication and re-authentication generates a new session and session id.	3.7 :not_applicable:
** DONE Verify that only session ids generated by the application framework are recognized as active by the application.	3.10
CLOSED: [2017-03-03 Fri 16:44]
The application will encrypt and sign session cookies, any session cookie
created outside of the application will not be deemed valid.
** Verify that session ids are sufficiently long, random and unique across the correct active session base.	3.11 :not_applicable:
There are no session ids.
** TODO Verify that session ids stored in cookies have their path set to an appropriately restrictive value for the application, and authentication session tokens additionally set the “HttpOnly” and “secure” attributes	3.12
We will be setting to HttpOnly and "secure" when running in a production
environment but this requires the environment to be set up first.
** TODO Verify that the application limits the number of active concurrent sessions.	3.16 :unclear:
I imagine this means per user but since we don't have 'users' would this mean
limiting concurrent sessions per IP address?
** Verify that an active session list is displayed in the account profile or similar of each user. The user should be able to terminate any active session.	3.17 :not_applicable:
There is no profile.
** Verify the user is prompted with the option to terminate all other active sessions after a successful change password process.	3.18 :not_applicable:

* V4: Access Control Verification Requirements	
** DONE Verify that the principle of least privilege exists - users should only be able to access functions, data files, URLs, controllers, services, and other resources, for which they possess specific authorization. This implies protection against spoofing and elevation of privilege.	4.1
CLOSED: [2017-03-06 Mon 15:02]
** DONE Verify that access to sensitive records is protected, such that only authorized objects or data is accessible to each user (for example, protect against users tampering with a parameter to see or alter another user's account).	4.4
CLOSED: [2017-03-06 Mon 15:04]
** DONE Verify that directory browsing is disabled unless deliberately desired. Additionally, applications should not allow discovery or disclosure of file or directory metadata, such as Thumbs.db, .DS_Store, .git or .svn folders.	4.5
CLOSED: [2017-03-06 Mon 17:22]
** DONE Verify that access controls fail securely.	4.8
CLOSED: [2017-03-08 Wed 10:42]
** DONE Verify that the same access control rules implied by the presentation layer are enforced on the server side.	4.9
CLOSED: [2017-03-06 Mon 17:24]
** Verify that all user and data attributes and policy information used by access controls cannot be manipulated by end users unless specifically authorized.	4.10
** TODO Verify that all access control decisions can be logged and all failed decisions are logged.	4.12
** TODO Verify that the application or framework uses strong random anti-CSRF tokens or has another transaction protection mechanism.	4.13
** TODO Verify the system can protect against aggregate or continuous access of secured functions, resources, or data. For example, consider the use of a resource governor to limit the number of edits per hour or to prevent the entire database from being scraped by an individual user.	4.14
** Verify the application has additional authorization (such as step up or adaptive authentication) for lower value systems, and / or segregation of duties for high value applications to enforce anti-fraud controls as per the risk of application and past fraud.	4.15 :not_applicable:
** DONE Verify that the application correctly enforces context-sensitive authorisation so as to not allow unauthorised manipulation by means of parameter tampering.	4.16
CLOSED: [2017-03-08 Wed 10:42]
* V5: Malicious input handling verification requirements	
** Verify that the runtime environment is not susceptible to buffer overflows, or that security controls prevent buffer overflows.	5.1
** TODO Verify that server side input validation failures result in request rejection and are logged.	5.3
** DONE Verify that input validation routines are enforced on the server side.	5.5
CLOSED: [2017-03-06 Mon 17:26]
** DONE Verify that all SQL queries, HQL, OSQL, NOSQL and stored procedures, calling of stored procedures are protected by the use of prepared statements or query parameterization, and thus not susceptible to SQL injection	5.10
CLOSED: [2017-03-06 Mon 17:26]
** Verify that the application is not susceptible to LDAP Injection, or that security controls prevent LDAP Injection.	5.11 :not_applicable:
** Verify that the application is not susceptible to OS Command Injection, or that security controls prevent OS Command Injection.	5.12
** Verify that the application is not susceptible to Remote File Inclusion (RFI) or Local File Inclusion (LFI) when content is used that is a path to a file.	5.13
** DONE Verify that the application is not susceptible to common XML attacks, such as XPath query tampering, XML External Entity attacks, and XML injection attacks.	5.14
CLOSED: [2017-03-06 Mon 17:26]
** DONE Ensure that all string variables placed into HTML or other web client code is either properly contextually encoded manually, or utilize templates that automatically encode contextually to ensure the application is not susceptible to reflected, stored and DOM Cross-Site Scripting (XSS) attacks.	5.15
CLOSED: [2017-03-06 Mon 17:26]
** If the application framework allows automatic mass parameter assignment (also called automatic variable binding) from the inbound request to a model, verify that security sensitive fields such as “a ccountBalance ”, “r ole ” or “p assword ” are protected from malicious automatic binding.	5.16 :not_applicable:
** Verify that the application has defenses against HTTP parameter pollution attacks, particularly if the application framework makes no distinction about the source of request parameters (GET, POST, cookies, headers, environment, etc.)	5.17 :not_applicable:
** TODO Verify that client side validation is used as a second line of defense, in addition to server side validation.	5.18
** Verify that all input data is validated, not only HTML form fields but all sources of input such as REST calls, query parameters, HTTP headers, cookies, batch files, RSS feeds, etc; using positive validation (whitelisting), then lesser forms of validation such as greylisting (eliminating known bad strings), or rejecting bad inputs (blacklisting).	5.19
** DONE Verify that structured data is strongly typed and validated against a defined schema including allowed characters, length and pattern (e.g. credit card numbers or telephone, or validating that two related fields are reasonable, such as validating suburbs and zip or post codes match).	5.20
CLOSED: [2017-03-06 Mon 17:27]
** DONE Verify that unstructured data is sanitized to enforce generic safety measures such as allowed characters and length, and characters potentially harmful in given context should be escaped (e.g. natural names with Unicode or apostrophes, such asねこor O'Hara)	5.21
CLOSED: [2017-03-06 Mon 17:28]
** Make sure untrusted HTML from WYSIWYG editors or similar are properly sanitized with an HTML sanitizer and handle it appropriately according to the input validation task and encoding task.	5.22 :not_applicable:
** For auto-escaping template technology, if UI escaping is disabled, ensure that HTML sanitization is enabled instead.	5.23
** Verify that data transferred from one DOM context to another, uses safe JavaScript methods, such as using .innerText and .val.	5.24 :not_applicable:
** Verify when parsing JSON in browsers, that JSON.parse is used to parse JSON on the client. Do not use eval() to parse JSON on the client.	5.25 :not_applicable:
** TODO Verify that authenticated data is cleared from client storage, such as the browser DOM, after the session is terminated.	5.26


* V7: Cryptography at rest verification requirements	
** Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable oracle padding.	7.2
** Verify that all random numbers, random file names, random GUIDs, and random strings are generated using the cryptographic module’s approved random number generator when these random values are intended to be not guessable by an attacker.	7.6
** TODO Verify that cryptographic algorithms used by the application have been validated against FIPS 140-2 or an equivalent standard.	7.7
** TODO Verify that cryptographic modules operate in their approved mode according to their published security policies.	7.8
** TODO Verify that there is an explicit policy for how cryptographic keys are managed (e.g., generated, distributed, revoked, and expired). Verify that this key lifecycle is properly enforced.	7.9 :unclear:
I need clarification on this

** Personally Identifiable Information should be stored encrypted at rest and ensure that communication goes via protected channels.	7.12 :unclear:
We don't store any PII at rest but it will exist in the NHSMail system. Is this
in scope?
** Verify that where possible, keys and secrets are zeroed when destroyed.	7.13 :fail:
** Verify that all keys and passwords are replaceable, and are generated or replaced at installation time.	7.14 :unclear:

* V8: Error handling and logging verification requirements	
** TODO Verify that the application does not output error messages or stack traces containing sensitive data that could assist an attacker, including session id, software/framework versions and personal information	8.1
** DONE Verify that error handling logic in security controls denies access by default.	8.2
CLOSED: [2017-03-07 Tue 17:19]
** Verify security logging controls provide the ability to log success and particularly failure events that are identified as security-relevant.	8.3
** Verify that each log event includes necessary information that would allow for a detailed investigation of the timeline when an event happens.	8.4
** Verify that security logs are protected from unauthorized access and modification.	8.6
** Verify that the application does not log sensitive data as defined under local privacy laws or regulations, organizational sensitive data as defined by a risk assessment, or sensitive authentication data that could assist an attacker, including user’s session identifiers, passwords, hashes, or API tokens.	8.7
** Verify that an audit log or similar allows for non-repudiation of key transactions.	8.10

* V9: Data protection verification requirements	
** TODO Verify that all forms containing sensitive information have disabled client side caching, including autocomplete features.	9.1
** DONE Verify that all sensitive data is sent to the server in the HTTP message body or headers (i.e., URL parameters are never used to send sensitive data).	9.3
CLOSED: [2017-03-06 Mon 17:33]
** Verify that the application sets appropriate anti-caching headers as per the risk of the application, such as the following: 
#+BEGIN_SRC http
Expires: Tue, 03 Jul 2001 06:00:00 GMT
Last-Modified: {now} GMT
Cache-Control: no-store, no-cache, must-revalidate, max-age=0
Cache-Control: post-check=0, pre-check=0
Pragma: no-cache"	9.4
#+END_SRC
** Verify that on the server, all cached or temporary copies of sensitive data stored are protected from unauthorized access or purged/invalidated after the authorized user accesses the sensitive data.	9.5
** Verify the application minimizes the number of parameters in a request, such as hidden fields, Ajax variables, cookies and header values.	9.7
** Verify that data stored in client side storage - such as HTML5 local storage, session storage, IndexedDB, regular cookies or Flash cookies - does not contain sensitive or PII).	9.9 :fail:
We are intentionally storing the data in the client side cookie.
** Verify accessing sensitive data is logged, if the data is collected under relevant data protection directives or where logging of accesses is required.	9.10 :not_applicable:
** Verify that sensitive data is rapidly sanitized from memory as soon as it is no longer needed and handled in accordance to functions and techniques supported by the framework/library/operating system.	9.11

* V10: Communications security verification requirements	
Depends on the load balancer
** TODO Verify that a path can be built from a trusted CA to each Transport Layer Security (TLS) server certificate, and that each server certificate is valid.	10.1
** TODO Verify that TLS is used for all connections (including both external and backend connections) that are authenticated or that involve sensitive data or functions, and does not fall back to insecure or unencrypted protocols. Ensure the strongest alternative is the preferred algorithm.	10.3
** TODO Verify that all connections to external systems that involve sensitive information or functions are authenticated.	10.6
** TODO Verify that HTTP Strict Transport Security headers are included on all requests and for all subdomains, such as Strict-Transport-Security: max-age=15724800; includeSubdomains	10.11
** TODO Ensure forward secrecy ciphers are in use to mitigate passive attackers recording traffic.	10.13
** TODO Verify that proper certification revocation, such as Online Certificate Status Protocol (OSCP) Stapling, is enabled and configured.	10.14
** TODO Verify that only strong algorithms, ciphers, and protocols are used, through all the certificate hierarchy, including root and intermediary certificates of your selected certifying authority.	10.15
** TODO Verify that the TLS settings are in line with current leading practice, particularly as common configurations, ciphers, and algorithms become insecure.	10.16

* V11: HTTP security configuration verification requirements	
These should all be OK but I want to see the application running behind the
production load balancer before marking as done.
** DONE Verify that the application accepts only a defined set of required HTTP request methods, such as GET and POST are accepted, and unused methods (e.g. TRACE, PUT, and DELETE) are explicitly blocked.	11.1
CLOSED: [2017-03-06 Mon 17:46]
** TODO Verify that every HTTP response contains a content type header specifying a safe character set (e.g., UTF-8, ISO 8859-1).	11.2
** TODO Verify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, are authenticated by the application.	11.3
** TODO Verify that the Content Security Policy V2 (CSP) is in use for sites where content should not be viewed in a 3rd-party X-Frame.	11.4
** TODO Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components.	11.5
** TODO Verify that all API responses contain X-Content-Type-Options: nosniff and Content-Disposition: attachment; filename="api.json" (or other appropriate filename for the content type).	11.6
** TODO Verify that the Content Security Policy V2 (CSP) is in use in a way that either disables inline JavaScript or provides an integrity check on inline JavaScript with CSP noncing or hashing.	11.7
** TODO Verify that the X-XSS-Protection: 1; mode=block header is in place.	11.8

* V15: Business logic verification requirements	
** TODO Verify the application will only process business logic flows in sequential step order, with all steps being processed in realistic human time, and not process out of order, skipped steps, process steps from another  user, or too quickly submitted transactions.	15.1
** TODO Verify the application has business limits and correctly enforces on a per user basis, with configurable alerting and automated reactions to automated or unusual attack.	15.2

* V16: Files and resources verification requirements	
** Verify that URL redirects and forwards only allow whitelisted destinations, or show a warning when redirecting to potentially untrusted content.	16.1
** DONE Verify that untrusted file data submitted to the application is not used directly with file I/O commands, particularly to protect against path traversal, local file include, file mime type, and OS command injection vulnerabilities.	16.2
CLOSED: [2017-03-07 Tue 17:01]
** Verify that files obtained from untrusted sources are validated to be of expected type and scanned by antivirus scanners to prevent upload of known malicious content.	16.3 :not_applicable:
** Verify that untrusted data is not used within inclusion, class loader, or reflection capabilities to prevent remote/local file inclusion vulnerabilities.	16.4 :not_applicable:
** Verify that untrusted data is not used within cross-domain resource sharing (CORS) to protect against arbitrary remote content.	16.5
** Verify that files obtained from untrusted sources are stored outside the webroot, with limited permissions, preferably with strong validation.	16.6 :not_applicable:
** Verify that the web or application server is configured by default to deny access to remote resources or systems outside the web or application server.	16.7
** Verify the application code does not execute uploaded data obtained from untrusted sources.	16.8 :not_applicable:
** DONE Do not use Flash, Active-X, Silverlight, NACL, client-side Java or other client side technologies not supported natively via W3C browser standards.	16.9
CLOSED: [2017-03-06 Mon 17:48]

* V17: Mobile verification requirements	

Answering these as if someone was using our service on their device using a browser.

** DONE Verify that ID values stored on the device and retrievable by other applications, such as the UDID or IMEI number are not used as authentication tokens.	17.1
CLOSED: [2017-03-07 Tue 16:50]
** Verify that the mobile app does not store sensitive data onto potentially unencrypted shared resources on the device (e.g. SD card or shared folders).	17.2 :not_applicable:
** Verify that sensitive data is not stored unprotected on the device, even in system protected areas such as key chains.	17.3 :unclear:
We are storing data in an encrypted cookie, is this acceptable?
** Verify that secret keys, API tokens, or passwords are dynamically generated in mobile applications.	17.4 :not_applicable:
** Verify that the mobile app prevents leaking of sensitive information (for example, screenshots are saved of the current application as the application is backgrounded or writing sensitive information in console).	17.5 :not_applicable:
** Verify that the application is requesting minimal permissions for required functionality and resources.	17.6 :not_applicable:
** Verify that the application sensitive code is laid out unpredictably in memory (For example ASLR).	17.7 :not_applicable:
** Verify that the app does not export sensitive activities, intents, content providers etc., for other mobile apps on the same device to exploit.	17.9 :not_applicable:
** Verify that the app’s exposed activities, intents, content providers etc. validate all inputs.	17.11 :not_applicable:
* V18: Web services verification requirements	
** Verify that the same encoding style is used between the client and the server.	18.1
** Verify that access to administration and management functions within the Web Service Application is limited to web service administrators.	18.2 :not_applicable:
** DONE Verify that XML or JSON schema is in place and verified before accepting input.	18.3
CLOSED: [2017-03-07 Tue 18:03]
** DONE Verify that all input is limited to an appropriate size limit.	18.4
CLOSED: [2017-03-07 Tue 18:03]
** Verify that SOAP based web services are compliant with Web Services-Interoperability (WS-I) Basic Profile at minimum.	18.5 :not_applicable:
** DONE Verify the use of session-based authentication and authorization. Please refer to sections 2, 3 and 4 for further guidance. Avoid the use of static "API keys" and similar.	18.6
CLOSED: [2017-03-07 Tue 18:03]
** TODO Verify that the REST service is protected from Cross-Site Request Forgery.	18.7
** DONE Verify the REST service explicitly check the incoming Content-Type to be the expected one, such as application/xml or application/json.	18.8
CLOSED: [2017-03-07 Tue 18:04]
** Verify that the message payload is signed to ensure reliable transport between client and service.	18.9 :not_applicable:
** DONE Verify that alternative and less secure access paths do not exist.	18.10
CLOSED: [2017-03-07 Tue 18:04]
* V19: Configuration	
** TODO All components should be up to date with proper security configuration(s) and version(s). This should include removal of unneeded configurations and folders such as sample applications, platform documentation, and default or example users.	19.1
** Communications between components, such as between the application server and the database server, should be encrypted, particularly when the components are in different containers or on different systems.	19.2 :unclear:
Does this mean that the connection between the load balancer and the application
needs to have TLS?
** Communications between components, such as between the application server and the database server should be authenticated using an account with the least necessary privileges.	19.3 :not_applicable:
** DONE Verify application deployments are adequately sandboxed, containerized or isolated to delay and deter attackers from attacking other applications.	19.4
CLOSED: [2017-03-08 Wed 11:37]
** DONE Verify that the application build and deployment processes are performed in a secure fashion.	19.5
CLOSED: [2017-03-08 Wed 11:37]
